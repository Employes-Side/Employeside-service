//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Blogs = newBlogsTable("employeside", "blogs", "")

type blogsTable struct {
	mysql.Table

	// Columns
	ID          mysql.ColumnString
	BlogName    mysql.ColumnString
	BlogTitle   mysql.ColumnString
	BlogContent mysql.ColumnString
	ModuleID    mysql.ColumnString
	WriterID    mysql.ColumnString
	WriterName  mysql.ColumnString
	CreatedAt   mysql.ColumnTimestamp
	UpdatedAt   mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type BlogsTable struct {
	blogsTable

	NEW blogsTable
}

// AS creates new BlogsTable with assigned alias
func (a BlogsTable) AS(alias string) *BlogsTable {
	return newBlogsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new BlogsTable with assigned schema name
func (a BlogsTable) FromSchema(schemaName string) *BlogsTable {
	return newBlogsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new BlogsTable with assigned table prefix
func (a BlogsTable) WithPrefix(prefix string) *BlogsTable {
	return newBlogsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new BlogsTable with assigned table suffix
func (a BlogsTable) WithSuffix(suffix string) *BlogsTable {
	return newBlogsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newBlogsTable(schemaName, tableName, alias string) *BlogsTable {
	return &BlogsTable{
		blogsTable: newBlogsTableImpl(schemaName, tableName, alias),
		NEW:        newBlogsTableImpl("", "new", ""),
	}
}

func newBlogsTableImpl(schemaName, tableName, alias string) blogsTable {
	var (
		IDColumn          = mysql.StringColumn("id")
		BlogNameColumn    = mysql.StringColumn("blog_name")
		BlogTitleColumn   = mysql.StringColumn("blog_title")
		BlogContentColumn = mysql.StringColumn("blog_content")
		ModuleIDColumn    = mysql.StringColumn("module_id")
		WriterIDColumn    = mysql.StringColumn("writer_id")
		WriterNameColumn  = mysql.StringColumn("writer_name")
		CreatedAtColumn   = mysql.TimestampColumn("created_at")
		UpdatedAtColumn   = mysql.TimestampColumn("updated_at")
		allColumns        = mysql.ColumnList{IDColumn, BlogNameColumn, BlogTitleColumn, BlogContentColumn, ModuleIDColumn, WriterIDColumn, WriterNameColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns    = mysql.ColumnList{BlogNameColumn, BlogTitleColumn, BlogContentColumn, ModuleIDColumn, WriterIDColumn, WriterNameColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return blogsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		BlogName:    BlogNameColumn,
		BlogTitle:   BlogTitleColumn,
		BlogContent: BlogContentColumn,
		ModuleID:    ModuleIDColumn,
		WriterID:    WriterIDColumn,
		WriterName:  WriterNameColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
